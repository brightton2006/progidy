<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Stopwatch</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            width: 100%;
            text-align: center;
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6a11cb);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: gradient 3s ease infinite;
            background-size: 400% 400%;
        }

        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .subtitle {
            font-size: 1.2rem;
            margin-bottom: 40px;
            opacity: 0.9;
        }

        .stopwatch-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .stopwatch-display {
            font-size: 5rem;
            font-weight: 700;
            margin: 30px 0;
            color: white;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            font-variant-numeric: tabular-nums;
        }

        .stopwatch-controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-start {
            background: linear-gradient(45deg, #00b09b, #96c93d);
            color: white;
        }

        .btn-pause {
            background: linear-gradient(45deg, #ffd93d, #ff9a3d);
            color: white;
        }

        .btn-reset {
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            color: white;
        }

        .btn-lap {
            background: linear-gradient(45deg, #6a11cb, #2575fc);
            color: white;
        }

        .btn:disabled {
            background: #cccccc;
            color: #666666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }

        .laps-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            max-height: 300px;
            overflow-y: auto;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .laps-header {
            display: flex;
            justify-content: space-between;
            padding: 10px 15px;
            font-weight: 600;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 10px;
        }

        .lap-item {
            display: flex;
            justify-content: space-between;
            padding: 12px 15px;
            border-radius: 10px;
            margin-bottom: 8px;
            background: rgba(255, 255, 255, 0.05);
            transition: background 0.3s ease;
        }

        .lap-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .lap-number {
            font-weight: 600;
            color: #ffd93d;
        }

        .lap-time {
            font-weight: 600;
            font-variant-numeric: tabular-nums;
        }

        .fastest-lap {
            background: rgba(0, 180, 155, 0.2);
            border-left: 4px solid #00b09b;
        }

        .slowest-lap {
            background: rgba(255, 107, 107, 0.2);
            border-left: 4px solid #ff6b6b;
        }

        .laps-container::-webkit-scrollbar {
            width: 8px;
        }

        .laps-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .laps-container::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 10px;
        }

        .stats {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .stat-box {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 15px;
            min-width: 150px;
            backdrop-filter: blur(10px);
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        /* Animation for timer when running */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }

        .running {
            animation: pulse 1s infinite;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .stopwatch-display {
                font-size: 3.5rem;
            }
            
            .btn {
                padding: 12px 20px;
                font-size: 1rem;
            }
            
            .stats {
                flex-direction: column;
                align-items: center;
            }
        }

        @media (max-width: 480px) {
            .stopwatch-display {
                font-size: 2.8rem;
            }
            
            .stopwatch-controls {
                gap: 10px;
            }
            
            .btn {
                padding: 10px 15px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Colorful Stopwatch</h1>
        <p class="subtitle">Track time with style and precision</p>
        
        <div class="stopwatch-container">
            <div class="stopwatch-display" id="display">00:00:00.00</div>
            
            <div class="stopwatch-controls">
                <button class="btn btn-start" id="startBtn">
                    <i class="fas fa-play"></i> Start
                </button>
                <button class="btn btn-pause" id="pauseBtn" disabled>
                    <i class="fas fa-pause"></i> Pause
                </button>
                <button class="btn btn-reset" id="resetBtn" disabled>
                    <i class="fas fa-stop"></i> Reset
                </button>
                <button class="btn btn-lap" id="lapBtn" disabled>
                    <i class="fas fa-flag"></i> Lap
                </button>
            </div>
            
            <div class="stats">
                <div class="stat-box">
                    <div class="stat-value" id="lapCount">0</div>
                    <div class="stat-label">Laps</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="fastestLap">--:--.--</div>
                    <div class="stat-label">Fastest Lap</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="slowestLap">--:--.--</div>
                    <div class="stat-label">Slowest Lap</div>
                </div>
            </div>
        </div>
        
        <div class="laps-container">
            <div class="laps-header">
                <span>Lap</span>
                <span>Time</span>
            </div>
            <div id="lapsList">
                <!-- Lap items will be added here dynamically -->
            </div>
        </div>
    </div>

    <script>
        // Stopwatch variables
        let startTime;
        let elapsedTime = 0;
        let timerInterval;
        let isRunning = false;
        let lapTimes = [];
        let lapCount = 0;

        // DOM elements
        const display = document.getElementById('display');
        const startBtn = document.getElementById('startBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const resetBtn = document.getElementById('resetBtn');
        const lapBtn = document.getElementById('lapBtn');
        const lapsList = document.getElementById('lapsList');
        const lapCountElement = document.getElementById('lapCount');
        const fastestLapElement = document.getElementById('fastestLap');
        const slowestLapElement = document.getElementById('slowestLap');

        // Format time as HH:MM:SS.mm
        function formatTime(time) {
            const hours = Math.floor(time / 3600000);
            const minutes = Math.floor((time % 3600000) / 60000);
            const seconds = Math.floor((time % 60000) / 1000);
            const milliseconds = Math.floor((time % 1000) / 10);
            
            return (
                String(hours).padStart(2, '0') + ':' +
                String(minutes).padStart(2, '0') + ':' +
                String(seconds).padStart(2, '0') + '.' +
                String(milliseconds).padStart(2, '0')
            );
        }

        // Update the display
        function updateDisplay() {
            display.textContent = formatTime(elapsedTime);
        }

        // Start the stopwatch
        function start() {
            if (!isRunning) {
                startTime = Date.now() - elapsedTime;
                timerInterval = setInterval(function() {
                    elapsedTime = Date.now() - startTime;
                    updateDisplay();
                }, 10);
                
                isRunning = true;
                startBtn.disabled = true;
                pauseBtn.disabled = false;
                resetBtn.disabled = false;
                lapBtn.disabled = false;
                
                display.classList.add('running');
            }
        }

        // Pause the stopwatch
        function pause() {
            if (isRunning) {
                clearInterval(timerInterval);
                isRunning = false;
                startBtn.disabled = false;
                pauseBtn.disabled = true;
                
                display.classList.remove('running');
            }
        }

        // Reset the stopwatch
        function reset() {
            clearInterval(timerInterval);
            isRunning = false;
            elapsedTime = 0;
            lapTimes = [];
            lapCount = 0;
            
            updateDisplay();
            updateLapsList();
            updateStats();
            
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            resetBtn.disabled = true;
            lapBtn.disabled = true;
            
            display.classList.remove('running');
        }

        // Record a lap time
        function recordLap() {
            if (isRunning) {
                lapCount++;
                const lapTime = elapsedTime - (lapTimes.length > 0 ? lapTimes[lapTimes.length - 1].totalTime : 0);
                lapTimes.push({
                    lapNumber: lapCount,
                    lapTime: lapTime,
                    totalTime: elapsedTime
                });
                
                updateLapsList();
                updateStats();
            }
        }

        // Update the laps list
        function updateLapsList() {
            lapsList.innerHTML = '';
            
            if (lapTimes.length === 0) {
                const emptyMessage = document.createElement('div');
                emptyMessage.className = 'lap-item';
                emptyMessage.innerHTML = '<span>No laps recorded</span>';
                lapsList.appendChild(emptyMessage);
                return;
            }
            
            // Find fastest and slowest lap times
            let fastestLap = lapTimes[0].lapTime;
            let slowestLap = lapTimes[0].lapTime;
            
            lapTimes.forEach(lap => {
                if (lap.lapTime < fastestLap) fastestLap = lap.lapTime;
                if (lap.lapTime > slowestLap) slowestLap = lap.lapTime;
            });
            
            // Add lap items to the list
            lapTimes.forEach(lap => {
                const lapItem = document.createElement('div');
                lapItem.className = 'lap-item';
                
                // Add special classes for fastest and slowest laps
                if (lap.lapTime === fastestLap && lapTimes.length > 1) {
                    lapItem.classList.add('fastest-lap');
                } else if (lap.lapTime === slowestLap && lapTimes.length > 1) {
                    lapItem.classList.add('slowest-lap');
                }
                
                lapItem.innerHTML = `
                    <span class="lap-number">Lap ${lap.lapNumber}</span>
                    <span class="lap-time">${formatTime(lap.lapTime)}</span>
                `;
                
                lapsList.appendChild(lapItem);
            });
            
            // Scroll to the bottom of the laps list
            lapsList.scrollTop = lapsList.scrollHeight;
        }

        // Update statistics
        function updateStats() {
            lapCountElement.textContent = lapCount;
            
            if (lapTimes.length > 0) {
                // Find fastest and slowest lap times
                let fastestLap = lapTimes[0].lapTime;
                let slowestLap = lapTimes[0].lapTime;
                
                lapTimes.forEach(lap => {
                    if (lap.lapTime < fastestLap) fastestLap = lap.lapTime;
                    if (lap.lapTime > slowestLap) slowestLap = lap.lapTime;
                });
                
                fastestLapElement.textContent = formatTime(fastestLap);
                slowestLapElement.textContent = formatTime(slowestLap);
            } else {
                fastestLapElement.textContent = '--:--.--';
                slowestLapElement.textContent = '--:--.--';
            }
        }

        // Event listeners
        startBtn.addEventListener('click', start);
        pauseBtn.addEventListener('click', pause);
        resetBtn.addEventListener('click', reset);
        lapBtn.addEventListener('click', recordLap);

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            if (event.code === 'Space') {
                event.preventDefault();
                if (isRunning) {
                    pause();
                } else {
                    start();
                }
            } else if (event.code === 'KeyL') {
                event.preventDefault();
                recordLap();
            } else if (event.code === 'KeyR') {
                event.preventDefault();
                reset();
            }
        });

        // Initialize the display
        updateDisplay();
        updateLapsList();
    </script>
</body>
</html>
