<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Weather App</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            max-width: 900px;
            width: 100%;
            text-align: center;
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6a11cb);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: gradient 3s ease infinite;
            background-size: 400% 400%;
        }

        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .subtitle {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }

        .weather-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .search-container {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
        }

        .search-input {
            padding: 15px 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50px 0 0 50px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            width: 300px;
            outline: none;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            border-color: rgba(255, 255, 255, 0.6);
            background: rgba(255, 255, 255, 0.15);
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .search-btn {
            padding: 15px 25px;
            border: none;
            border-radius: 0 50px 50px 0;
            background: linear-gradient(45deg, #ff6b6b, #ff9a3d);
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-btn:hover {
            background: linear-gradient(45deg, #ff9a3d, #ff6b6b);
            transform: translateY(-2px);
        }

        .location-btn {
            padding: 15px;
            margin-left: 10px;
            border: none;
            border-radius: 50px;
            background: linear-gradient(45deg, #00b09b, #96c93d);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .location-btn:hover {
            background: linear-gradient(45deg, #96c93d, #00b09b);
            transform: translateY(-2px);
        }

        .weather-display {
            display: none;
        }

        .current-weather {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
        }

        .weather-main {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .weather-icon {
            font-size: 5rem;
            filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.3));
        }

        .temperature {
            font-size: 4rem;
            font-weight: 700;
        }

        .weather-details {
            text-align: right;
        }

        .location {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 10px;
        }

        .description {
            font-size: 1.3rem;
            margin-bottom: 15px;
            text-transform: capitalize;
        }

        .weather-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.15);
        }

        .stat-icon {
            font-size: 2rem;
            margin-bottom: 10px;
            color: #ffd93d;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .forecast {
            margin-top: 30px;
        }

        .forecast-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            text-align: left;
            color: #ffd93d;
        }

        .forecast-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .forecast-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 15px;
            transition: transform 0.3s ease;
        }

        .forecast-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.15);
        }

        .forecast-day {
            font-weight: 600;
            margin-bottom: 10px;
        }

        .forecast-icon {
            font-size: 2.5rem;
            margin: 10px 0;
            filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.3));
        }

        .forecast-temp {
            display: flex;
            justify-content: space-between;
        }

        .forecast-high {
            font-weight: 600;
        }

        .forecast-low {
            opacity: 0.7;
        }

        .loading {
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 40px;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #ffd93d;
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 20px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .error-message {
            display: none;
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }

        .unit-toggle {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .unit-btn {
            padding: 8px 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            background: transparent;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .unit-btn.active {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .unit-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Weather condition backgrounds */
        .weather-sunny {
            background: linear-gradient(135deg, #ff9a3d 0%, #ff6b6b 100%);
        }

        .weather-cloudy {
            background: linear-gradient(135deg, #6a85b6 0%, #bac8e0 100%);
        }

        .weather-rainy {
            background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);
        }

        .weather-snowy {
            background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%);
        }

        .weather-clear {
            background: linear-gradient(135deg, #ffd93d 0%, #ff9a3d 100%);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .current-weather {
                flex-direction: column;
                text-align: center;
            }
            
            .weather-details {
                text-align: center;
                margin-top: 20px;
            }
            
            .location {
                justify-content: center;
            }
            
            .search-input {
                width: 200px;
            }
            
            .weather-stats {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 480px) {
            .search-container {
                flex-direction: column;
                gap: 10px;
            }
            
            .search-input, .search-btn, .location-btn {
                border-radius: 50px;
                width: 100%;
            }
            
            .temperature {
                font-size: 3rem;
            }
            
            .forecast-container {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Colorful Weather</h1>
        <p class="subtitle">Get accurate weather information for any location</p>
        
        <div class="weather-container">
            <div class="search-container">
                <input type="text" class="search-input" id="searchInput" placeholder="Enter city name...">
                <button class="search-btn" id="searchBtn">
                    <i class="fas fa-search"></i> Search
                </button>
                <button class="location-btn" id="locationBtn" title="Use my location">
                    <i class="fas fa-location-arrow"></i>
                </button>
            </div>
            
            <div class="unit-toggle">
                <button class="unit-btn active" data-unit="metric">°C</button>
                <button class="unit-btn" data-unit="imperial">°F</button>
            </div>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Loading weather data...</p>
            </div>
            
            <div class="error-message" id="errorMessage">
                <h3><i class="fas fa-exclamation-triangle"></i> Error</h3>
                <p id="errorText">Unable to fetch weather data. Please try again.</p>
            </div>
            
            <div class="weather-display" id="weatherDisplay">
                <div class="current-weather">
                    <div class="weather-main">
                        <div class="weather-icon" id="weatherIcon">
                            <i class="fas fa-sun"></i>
                        </div>
                        <div class="temperature" id="temperature">24°</div>
                    </div>
                    <div class="weather-details">
                        <div class="location" id="location">
                            <i class="fas fa-map-marker-alt"></i> New York, US
                        </div>
                        <div class="description" id="description">Sunny</div>
                        <div class="date" id="date">Monday, October 3</div>
                    </div>
                </div>
                
                <div class="weather-stats">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-wind"></i>
                        </div>
                        <div class="stat-value" id="windSpeed">5 km/h</div>
                        <div class="stat-label">Wind Speed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-tint"></i>
                        </div>
                        <div class="stat-value" id="humidity">65%</div>
                        <div class="stat-label">Humidity</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-compress-arrows-alt"></i>
                        </div>
                        <div class="stat-value" id="pressure">1015 hPa</div>
                        <div class="stat-label">Pressure</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-eye"></i>
                        </div>
                        <div class="stat-value" id="visibility">10 km</div>
                        <div class="stat-label">Visibility</div>
                    </div>
                </div>
                
                <div class="forecast">
                    <h3 class="forecast-title">5-Day Forecast</h3>
                    <div class="forecast-container" id="forecastContainer">
                        <!-- Forecast cards will be added here dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM elements
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const locationBtn = document.getElementById('locationBtn');
        const loading = document.getElementById('loading');
        const errorMessage = document.getElementById('errorMessage');
        const errorText = document.getElementById('errorText');
        const weatherDisplay = document.getElementById('weatherDisplay');
        const weatherIcon = document.getElementById('weatherIcon');
        const temperature = document.getElementById('temperature');
        const locationElement = document.getElementById('location');
        const description = document.getElementById('description');
        const dateElement = document.getElementById('date');
        const windSpeed = document.getElementById('windSpeed');
        const humidity = document.getElementById('humidity');
        const pressure = document.getElementById('pressure');
        const visibility = document.getElementById('visibility');
        const forecastContainer = document.getElementById('forecastContainer');
        const unitButtons = document.querySelectorAll('.unit-btn');

        // API key and base URL (using OpenWeatherMap API)
        const API_KEY = 'your_api_key_here'; // Replace with your actual API key
        const BASE_URL = 'https://api.openweathermap.org/data/2.5';
        
        // Current unit (metric for Celsius, imperial for Fahrenheit)
        let currentUnit = 'metric';

        // Initialize the app
        function init() {
            // Set current date
            updateDate();
            
            // Add event listeners
            searchBtn.addEventListener('click', handleSearch);
            locationBtn.addEventListener('click', handleLocation);
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') handleSearch();
            });
            
            unitButtons.forEach(btn => {
                btn.addEventListener('click', handleUnitChange);
            });
            
            // Load weather for a default city
            getWeatherByCity('New York');
        }

        // Handle search
        function handleSearch() {
            const city = searchInput.value.trim();
            if (city) {
                getWeatherByCity(city);
            }
        }

        // Handle location
        function handleLocation() {
            if (navigator.geolocation) {
                loading.style.display = 'flex';
                weatherDisplay.style.display = 'none';
                errorMessage.style.display = 'none';
                
                navigator.geolocation.getCurrentPosition(
                    position => {
                        const { latitude, longitude } = position.coords;
                        getWeatherByCoords(latitude, longitude);
                    },
                    error => {
                        loading.style.display = 'none';
                        showError('Unable to retrieve your location. Please allow location access or search for a city.');
                    }
                );
            } else {
                showError('Geolocation is not supported by your browser.');
            }
        }

        // Handle unit change
        function handleUnitChange(e) {
            const unit = e.target.getAttribute('data-unit');
            if (unit !== currentUnit) {
                currentUnit = unit;
                
                // Update active button
                unitButtons.forEach(btn => {
                    btn.classList.toggle('active', btn.getAttribute('data-unit') === unit);
                });
                
                // Refresh weather data with new unit
                const currentLocation = locationElement.textContent.split(', ')[0];
                if (currentLocation) {
                    getWeatherByCity(currentLocation);
                }
            }
        }

        // Get weather by city name
        async function getWeatherByCity(city) {
            loading.style.display = 'flex';
            weatherDisplay.style.display = 'none';
            errorMessage.style.display = 'none';
            
            try {
                // For demo purposes, we'll use mock data since we don't have a real API key
                // In a real app, you would use:
                // const response = await fetch(`${BASE_URL}/weather?q=${city}&units=${currentUnit}&appid=${API_KEY}`);
                // const data = await response.json();
                
                // Simulate API delay
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Mock weather data
                const mockWeatherData = getMockWeatherData(city);
                
                if (mockWeatherData.cod === 200) {
                    displayWeather(mockWeatherData);
                } else {
                    throw new Error(mockWeatherData.message || 'City not found');
                }
            } catch (error) {
                loading.style.display = 'none';
                showError(error.message);
            }
        }

        // Get weather by coordinates
        async function getWeatherByCoords(lat, lon) {
            try {
                // For demo purposes, we'll use mock data
                // In a real app, you would use:
                // const response = await fetch(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&units=${currentUnit}&appid=${API_KEY}`);
                // const data = await response.json();
                
                // Simulate API delay
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Mock weather data for coordinates (using a generic city name)
                const mockWeatherData = getMockWeatherData('Current Location');
                
                if (mockWeatherData.cod === 200) {
                    displayWeather(mockWeatherData);
                } else {
                    throw new Error(mockWeatherData.message || 'Unable to fetch weather data');
                }
            } catch (error) {
                loading.style.display = 'none';
                showError(error.message);
            }
        }

        // Display weather data
        function displayWeather(data) {
            loading.style.display = 'none';
            weatherDisplay.style.display = 'block';
            
            // Update current weather
            temperature.textContent = `${Math.round(data.main.temp)}°${currentUnit === 'metric' ? 'C' : 'F'}`;
            locationElement.innerHTML = `<i class="fas fa-map-marker-alt"></i> ${data.name}, ${data.sys.country}`;
            description.textContent = data.weather[0].description;
            
            // Update weather icon
            updateWeatherIcon(data.weather[0].main, data.weather[0].description);
            
            // Update weather stats
            windSpeed.textContent = `${data.wind.speed} ${currentUnit === 'metric' ? 'km/h' : 'mph'}`;
            humidity.textContent = `${data.main.humidity}%`;
            pressure.textContent = `${data.main.pressure} hPa`;
            visibility.textContent = `${(data.visibility / 1000).toFixed(1)} km`;
            
            // Update background based on weather condition
            updateBackground(data.weather[0].main);
            
            // Update forecast (using mock forecast data)
            displayForecast(getMockForecastData());
        }

        // Update weather icon based on condition
        function updateWeatherIcon(main, description) {
            const iconMap = {
                'Clear': 'fa-sun',
                'Clouds': description.includes('few') ? 'fa-cloud-sun' : 'fa-cloud',
                'Rain': 'fa-cloud-rain',
                'Drizzle': 'fa-cloud-drizzle',
                'Thunderstorm': 'fa-bolt',
                'Snow': 'fa-snowflake',
                'Mist': 'fa-smog',
                'Smoke': 'fa-smog',
                'Haze': 'fa-smog',
                'Dust': 'fa-smog',
                'Fog': 'fa-smog',
                'Sand': 'fa-smog',
                'Ash': 'fa-smog',
                'Squall': 'fa-wind',
                'Tornado': 'fa-tornado'
            };
            
            const iconClass = iconMap[main] || 'fa-cloud';
            weatherIcon.innerHTML = `<i class="fas ${iconClass}"></i>`;
        }

        // Update background based on weather condition
        function updateBackground(condition) {
            const body = document.body;
            
            // Remove existing weather classes
            body.classList.remove(
                'weather-sunny', 'weather-cloudy', 'weather-rainy', 
                'weather-snowy', 'weather-clear'
            );
            
            // Add appropriate class
            if (condition === 'Clear') {
                body.classList.add('weather-sunny');
            } else if (condition === 'Clouds') {
                body.classList.add('weather-cloudy');
            } else if (condition === 'Rain' || condition === 'Drizzle' || condition === 'Thunderstorm') {
                body.classList.add('weather-rainy');
            } else if (condition === 'Snow') {
                body.classList.add('weather-snowy');
            } else {
                body.classList.add('weather-clear');
            }
        }

        // Display forecast data
        function displayForecast(forecastData) {
            forecastContainer.innerHTML = '';
            
            forecastData.forEach(day => {
                const forecastCard = document.createElement('div');
                forecastCard.className = 'forecast-card';
                
                forecastCard.innerHTML = `
                    <div class="forecast-day">${day.day}</div>
                    <div class="forecast-icon">
                        <i class="fas ${day.icon}"></i>
                    </div>
                    <div class="forecast-temp">
                        <span class="forecast-high">${day.high}°</span>
                        <span class="forecast-low">${day.low}°</span>
                    </div>
                    <div class="forecast-desc">${day.description}</div>
                `;
                
                forecastContainer.appendChild(forecastCard);
            });
        }

        // Update current date
        function updateDate() {
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            dateElement.textContent = now.toLocaleDateString('en-US', options);
        }

        // Show error message
        function showError(message) {
            errorText.textContent = message;
            errorMessage.style.display = 'block';
        }

        // Mock weather data for demonstration
        function getMockWeatherData(city) {
            const cities = {
                'New York': { temp: 22, condition: 'Clear', country: 'US' },
                'London': { temp: 15, condition: 'Clouds', country: 'GB' },
                'Tokyo': { temp: 18, condition: 'Rain', country: 'JP' },
                'Sydney': { temp: 25, condition: 'Clear', country: 'AU' },
                'Paris': { temp: 17, condition: 'Clouds', country: 'FR' },
                'Current Location': { temp: 20, condition: 'Clear', country: 'US' }
            };
            
            const cityData = cities[city] || { temp: 20, condition: 'Clear', country: 'US' };
            
            return {
                cod: 200,
                name: city,
                sys: { country: cityData.country },
                main: {
                    temp: cityData.temp,
                    humidity: Math.floor(Math.random() * 30) + 50,
                    pressure: Math.floor(Math.random() * 50) + 1000
                },
                weather: [
                    {
                        main: cityData.condition,
                        description: cityData.condition.toLowerCase()
                    }
                ],
                wind: {
                    speed: Math.floor(Math.random() * 15) + 5
                },
                visibility: Math.floor(Math.random() * 5000) + 5000
            };
        }

        // Mock forecast data for demonstration
        function getMockForecastData() {
            const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];
            const conditions = [
                { main: 'Clear', icon: 'fa-sun', desc: 'Sunny' },
                { main: 'Clouds', icon: 'fa-cloud', desc: 'Cloudy' },
                { main: 'Rain', icon: 'fa-cloud-rain', desc: 'Rainy' },
                { main: 'Clear', icon: 'fa-sun', desc: 'Clear' },
                { main: 'Clouds', icon: 'fa-cloud-sun', desc: 'Partly Cloudy' }
            ];
            
            return days.map((day, i) => {
                const condition = conditions[i];
                const baseTemp = currentUnit === 'metric' ? 20 : 68;
                
                return {
                    day,
                    icon: condition.icon,
                    high: baseTemp + Math.floor(Math.random() * 5),
                    low: baseTemp - Math.floor(Math.random() * 5),
                    description: condition.desc
                };
            });
        }

        // Initialize the app
        init();
    </script>
</body>
</html>
