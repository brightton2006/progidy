<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Tic-Tac-Toe</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            width: 100%;
            text-align: center;
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6a11cb);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: gradient 3s ease infinite;
            background-size: 400% 400%;
        }

        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .subtitle {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 15px;
        }

        .player-turn {
            font-size: 1.3rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .player-x {
            color: #ff6b6b;
        }

        .player-o {
            color: #4dabf7;
        }

        .score-board {
            display: flex;
            gap: 20px;
        }

        .score {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 15px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
        }

        .score-x {
            border-left: 4px solid #ff6b6b;
        }

        .score-o {
            border-left: 4px solid #4dabf7;
        }

        .score-ties {
            border-left: 4px solid #ffd93d;
        }

        .score-value {
            font-size: 1.8rem;
            font-weight: 700;
        }

        .score-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            max-width: 400px;
            margin: 0 auto 30px;
        }

        .cell {
            aspect-ratio: 1;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .cell:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.05);
        }

        .cell.x {
            color: #ff6b6b;
            text-shadow: 0 0 10px rgba(255, 107, 107, 0.5);
        }

        .cell.o {
            color: #4dabf7;
            text-shadow: 0 0 10px rgba(77, 171, 247, 0.5);
        }

        .cell.win {
            background: linear-gradient(45deg, #00b09b, #96c93d);
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .game-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-primary {
            background: linear-gradient(45deg, #00b09b, #96c93d);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(45deg, #ffd93d, #ff9a3d);
            color: white;
        }

        .btn-reset {
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            color: white;
        }

        .game-mode {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .mode-btn {
            padding: 10px 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50px;
            background: transparent;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .mode-btn.active {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .mode-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .message {
            font-size: 1.5rem;
            font-weight: 700;
            margin: 20px 0;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .message.win {
            color: #00b09b;
            animation: bounce 0.5s;
        }

        .message.draw {
            color: #ffd93d;
        }

        @keyframes bounce {
            0%, 20%, 60%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            80% { transform: translateY(-5px); }
        }

        .difficulty {
            margin-top: 15px;
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .diff-btn {
            padding: 8px 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            background: transparent;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .diff-btn.active {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .board {
                max-width: 350px;
            }
            
            .cell {
                font-size: 3rem;
            }
            
            .game-info {
                flex-direction: column;
                gap: 15px;
            }
            
            .score-board {
                width: 100%;
                justify-content: space-around;
            }
        }

        @media (max-width: 480px) {
            .board {
                max-width: 300px;
                gap: 10px;
            }
            
            .cell {
                font-size: 2.5rem;
            }
            
            .btn {
                padding: 10px 20px;
                font-size: 0.9rem;
            }
            
            .game-mode, .difficulty {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Colorful Tic-Tac-Toe</h1>
        <p class="subtitle">The classic game with a modern twist</p>
        
        <div class="game-container">
            <div class="game-info">
                <div class="player-turn">
                    <span>Current Player:</span>
                    <span id="currentPlayer" class="player-x">X</span>
                </div>
                
                <div class="score-board">
                    <div class="score score-x">
                        <div class="score-value" id="scoreX">0</div>
                        <div class="score-label">Player X</div>
                    </div>
                    <div class="score score-ties">
                        <div class="score-value" id="scoreTies">0</div>
                        <div class="score-label">Ties</div>
                    </div>
                    <div class="score score-o">
                        <div class="score-value" id="scoreO">0</div>
                        <div class="score-label">Player O</div>
                    </div>
                </div>
            </div>
            
            <div class="board" id="board">
                <!-- Cells will be generated by JavaScript -->
            </div>
            
            <div class="message" id="message">
                <!-- Game messages will appear here -->
            </div>
            
            <div class="game-controls">
                <button class="btn btn-primary" id="newGameBtn">
                    <i class="fas fa-plus-circle"></i> New Game
                </button>
                <button class="btn btn-reset" id="resetScoreBtn">
                    <i class="fas fa-redo"></i> Reset Score
                </button>
            </div>
            
            <div class="game-mode">
                <button class="mode-btn active" id="pvpBtn">Player vs Player</button>
                <button class="mode-btn" id="pvcBtn">Player vs Computer</button>
            </div>
            
            <div class="difficulty" id="difficultyContainer">
                <button class="diff-btn active" data-difficulty="easy">Easy</button>
                <button class="diff-btn" data-difficulty="medium">Medium</button>
                <button class="diff-btn" data-difficulty="hard">Hard</button>
            </div>
        </div>
    </div>

    <script>
        // Game variables
        let board = ['', '', '', '', '', '', '', '', ''];
        let currentPlayer = 'X';
        let gameActive = true;
        let gameMode = 'pvp'; // 'pvp' or 'pvc'
        let difficulty = 'easy';
        let scores = {
            X: 0,
            O: 0,
            ties: 0
        };

        // Winning combinations
        const winningConditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
            [0, 4, 8], [2, 4, 6]             // Diagonals
        ];

        // DOM elements
        const boardElement = document.getElementById('board');
        const currentPlayerElement = document.getElementById('currentPlayer');
        const messageElement = document.getElementById('message');
        const newGameBtn = document.getElementById('newGameBtn');
        const resetScoreBtn = document.getElementById('resetScoreBtn');
        const pvpBtn = document.getElementById('pvpBtn');
        const pvcBtn = document.getElementById('pvcBtn');
        const difficultyContainer = document.getElementById('difficultyContainer');
        const scoreXElement = document.getElementById('scoreX');
        const scoreOElement = document.getElementById('scoreO');
        const scoreTiesElement = document.getElementById('scoreTies');

        // Initialize the game board
        function initializeBoard() {
            boardElement.innerHTML = '';
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.setAttribute('data-index', i);
                cell.addEventListener('click', () => cellClicked(i));
                boardElement.appendChild(cell);
            }
        }

        // Handle cell click
        function cellClicked(index) {
            if (board[index] !== '' || !gameActive) return;

            // Player move
            makeMove(index, currentPlayer);

            // Check for win or draw
            if (checkWin()) {
                handleWin();
                return;
            }

            if (checkDraw()) {
                handleDraw();
                return;
            }

            // Switch player or AI move
            if (gameMode === 'pvp') {
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                updateCurrentPlayerDisplay();
            } else {
                // AI move in PVC mode
                currentPlayer = 'O';
                updateCurrentPlayerDisplay();
                
                setTimeout(() => {
                    makeAIMove();
                    
                    if (checkWin()) {
                        handleWin();
                        return;
                    }

                    if (checkDraw()) {
                        handleDraw();
                        return;
                    }
                    
                    currentPlayer = 'X';
                    updateCurrentPlayerDisplay();
                }, 500);
            }
        }

        // Make a move on the board
        function makeMove(index, player) {
            board[index] = player;
            const cell = document.querySelector(`.cell[data-index="${index}"]`);
            cell.textContent = player;
            cell.classList.add(player.toLowerCase());
        }

        // Make AI move based on difficulty
        function makeAIMove() {
            let availableCells = board.map((cell, index) => cell === '' ? index : null).filter(val => val !== null);
            
            if (availableCells.length === 0) return;
            
            let move;
            
            if (difficulty === 'easy') {
                // Random move
                move = availableCells[Math.floor(Math.random() * availableCells.length)];
            } else if (difficulty === 'medium') {
                // 50% chance to make a smart move, 50% random
                if (Math.random() < 0.5) {
                    move = findBestMove();
                } else {
                    move = availableCells[Math.floor(Math.random() * availableCells.length)];
                }
            } else {
                // Hard - always make the best move
                move = findBestMove();
            }
            
            makeMove(move, 'O');
        }

        // Find the best move for AI (minimax algorithm simplified)
        function findBestMove() {
            // First, check if AI can win
            for (let i = 0; i < 9; i++) {
                if (board[i] === '') {
                    board[i] = 'O';
                    if (checkWin()) {
                        board[i] = '';
                        return i;
                    }
                    board[i] = '';
                }
            }
            
            // Then, block player's winning move
            for (let i = 0; i < 9; i++) {
                if (board[i] === '') {
                    board[i] = 'X';
                    if (checkWin()) {
                        board[i] = '';
                        return i;
                    }
                    board[i] = '';
                }
            }
            
            // Otherwise, make a strategic move
            const corners = [0, 2, 6, 8];
            const availableCorners = corners.filter(index => board[index] === '');
            if (availableCorners.length > 0) {
                return availableCorners[Math.floor(Math.random() * availableCorners.length)];
            }
            
            // Center
            if (board[4] === '') return 4;
            
            // Sides
            const sides = [1, 3, 5, 7];
            const availableSides = sides.filter(index => board[index] === '');
            if (availableSides.length > 0) {
                return availableSides[Math.floor(Math.random() * availableSides.length)];
            }
            
            // Fallback to random
            const availableCells = board.map((cell, index) => cell === '' ? index : null).filter(val => val !== null);
            return availableCells[Math.floor(Math.random() * availableCells.length)];
        }

        // Check for win
        function checkWin() {
            for (let condition of winningConditions) {
                const [a, b, c] = condition;
                if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                    // Highlight winning cells
                    condition.forEach(index => {
                        document.querySelector(`.cell[data-index="${index}"]`).classList.add('win');
                    });
                    return true;
                }
            }
            return false;
        }

        // Check for draw
        function checkDraw() {
            return !board.includes('') && !checkWin();
        }

        // Handle win
        function handleWin() {
            gameActive = false;
            messageElement.textContent = `Player ${currentPlayer} Wins!`;
            messageElement.classList.add('win');
            
            // Update scores
            scores[currentPlayer]++;
            updateScores();
        }

        // Handle draw
        function handleDraw() {
            gameActive = false;
            messageElement.textContent = "It's a Draw!";
            messageElement.classList.add('draw');
            
            // Update scores
            scores.ties++;
            updateScores();
        }

        // Update current player display
        function updateCurrentPlayerDisplay() {
            currentPlayerElement.textContent = currentPlayer;
            currentPlayerElement.className = currentPlayer === 'X' ? 'player-x' : 'player-o';
        }

        // Update score display
        function updateScores() {
            scoreXElement.textContent = scores.X;
            scoreOElement.textContent = scores.O;
            scoreTiesElement.textContent = scores.ties;
        }

        // Reset game
        function resetGame() {
            board = ['', '', '', '', '', '', '', '', ''];
            currentPlayer = 'X';
            gameActive = true;
            messageElement.textContent = '';
            messageElement.classList.remove('win', 'draw');
            updateCurrentPlayerDisplay();
            initializeBoard();
        }

        // Reset scores
        function resetScores() {
            scores = { X: 0, O: 0, ties: 0 };
            updateScores();
            resetGame();
        }

        // Set game mode
        function setGameMode(mode) {
            gameMode = mode;
            pvpBtn.classList.toggle('active', mode === 'pvp');
            pvcBtn.classList.toggle('active', mode === 'pvc');
            difficultyContainer.style.display = mode === 'pvc' ? 'flex' : 'none';
            resetGame();
        }

        // Set difficulty
        function setDifficulty(level) {
            difficulty = level;
            document.querySelectorAll('.diff-btn').forEach(btn => {
                btn.classList.toggle('active', btn.getAttribute('data-difficulty') === level);
            });
        }

        // Event listeners
        newGameBtn.addEventListener('click', resetGame);
        resetScoreBtn.addEventListener('click', resetScores);
        pvpBtn.addEventListener('click', () => setGameMode('pvp'));
        pvcBtn.addEventListener('click', () => setGameMode('pvc'));

        document.querySelectorAll('.diff-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                setDifficulty(e.target.getAttribute('data-difficulty'));
            });
        });

        // Initialize the game
        initializeBoard();
        updateScores();
    </script>
</body>
</html>
